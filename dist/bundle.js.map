{"version":3,"file":"bundle.js","mappings":"mBAGA,IAOIA,EAAwBC,EAAKC,EAAMC,EAPnCC,EAAY,EAShB,MAAMC,EAAO,CACTC,EAAG,CACCC,SAAS,GAEbC,EAAG,CACCD,SAAS,GAEbE,EAAG,CACCF,SAAS,GAEbG,EAAG,CACCH,SAAS,IAgBjB,SAASI,IACLC,OAAOC,sBAAsBF,GAE7BV,EAAMa,KAAKb,OACXE,EAAUF,EAAMC,GAIFF,IAGVE,EAAOD,EAAOE,EAAUH,EAQpBK,EAAKC,EAAEC,SAAuB,MAAZQ,EAClBC,UAAUC,SAASC,IACfA,EAAQC,SAASC,GAxDlB,EAwDC,IAGCf,EAAKG,EAAED,SAAuB,MAAZQ,EACvBC,UAAUC,SAASC,IACfA,EAAQC,SAASE,GA7DlB,EA6DC,IAGChB,EAAKI,EAAEF,SAAuB,MAAZQ,EACvBC,UAAUC,SAASC,IACfA,EAAQC,SAASC,GAlElB,EAkEC,IAGCf,EAAKK,EAAEH,SAAuB,MAAZQ,GACvBC,UAAUC,SAASC,IACfA,EAAQC,SAASE,GAvElB,EAuEC,IAkCf,CAlFeC,SAASC,cAAc,SAE/BC,YADQ,IAwKhB,IAAIC,GAAU,EACdC,iBAAiB,SAAS,KACjBD,IACDE,IAAMC,MAAMC,WAEKC,MAAb1B,IACAA,EAAY,GAEhBuB,IAAII,OAAO3B,EAAY,KAKvBqB,GAAU,EACb,IAGL,IAAIV,EAAU,GACdH,OAAOc,iBAAiB,WAAYM,IAChC,OAAQA,EAAEC,KACN,IAAK,IACD5B,EAAKC,EAAEC,SAAU,EACjBQ,EAAU,IACV,MACJ,IAAK,IACDV,EAAKG,EAAED,SAAU,EACjBQ,EAAU,IACV,MAEJ,IAAK,IACDV,EAAKI,EAAEF,SAAU,EACjBQ,EAAU,IACV,MAEJ,IAAK,IACDV,EAAKK,EAAEH,SAAU,EACjBQ,EAAU,IAjBlB,IAsBJH,OAAOc,iBAAiB,SAAUM,IAC9B,OAAQA,EAAEC,KACN,IAAK,IACD5B,EAAKC,EAAEC,SAAU,EACjB,MACJ,IAAK,IACDF,EAAKG,EAAED,SAAU,EACjB,MACJ,IAAK,IACDF,EAAKI,EAAEF,SAAU,EACjB,MACJ,IAAK,IACDF,EAAKK,EAAEH,SAAU,EAXzB,IA7MAP,EAAc,IACdE,EAAOY,KAAKb,MAEZU,IA4JAuB,aAAaC,QA5ETC,aAAaC,eACbD,aAAaC,cAAcpB,SAASqB,IAChCC,UAAUD,EAAOE,KAAjB,IAgCRpC,EAAY8B,aAAaO,QAAQ,aAE5BP,aAAaQ,UAgHtBC,OAAOC,OAAS,CAACC,EAAKC,IAClBH,OAAOtC,KAAKwC,GACLD,QAAQX,GAAOa,EAAUD,EAAIZ,MAC7Bc,QAAQ,CAACC,EAAKf,KAASe,EAAIf,GAAOY,EAAIZ,GAAMe,IAAM,CAAC,E","sources":["webpack://package/./src/index.js"],"sourcesContent":["import { KeyPressListener } from \"./keyPressListener.js\"\r\nimport {utils} from \"./utils.js\"\r\n\r\nvar bgmVolume = 5;\r\nvar playerMS = 20;\r\n\r\nvar isPaused = false;\r\n\r\nvar frameCount = 0;\r\nvar fps = 5;\r\nvar fpsInterval, startTime, now, then, elapsed;\r\n\r\nconst keys = {\r\n    w: {\r\n        pressed: false\r\n    },\r\n    a: {\r\n        pressed: false\r\n    },\r\n    s: {\r\n        pressed: false\r\n    },\r\n    d: {\r\n        pressed: false\r\n    }\r\n}\r\n\r\nconst goldDiv = document.querySelector(\"#gold\")\r\nlet goldCount = 234\r\ngoldDiv.textContent = goldCount\r\n\r\n// initialize the timer variables and start the animation\r\nfunction startAnimating(fps) {\r\n    fpsInterval = 1000 / fps;\r\n    then = Date.now();\r\n    startTime = then;\r\n    update();\r\n}\r\n\r\nfunction update() {\r\n    window.requestAnimationFrame(update)\r\n\r\n    now = Date.now();\r\n    elapsed = now - then;\r\n\r\n    // if enough time has elapsed, draw the next frame\r\n\r\n    if (elapsed > fpsInterval) {\r\n        // Get ready for next frame by setting then=now, but also adjust for your\r\n        // specified fpsInterval not being a multiple of RAF's interval (16.7ms)\r\n        then = now - (elapsed % fpsInterval);\r\n\r\n        // update the game\r\n        if (isPaused) {\r\n            console.log(\"paused\")\r\n            return;\r\n        }\r\n\r\n        if (keys.w.pressed && lastKey === 'w') {\r\n            moveables.forEach((movable) => {\r\n                movable.position.y += playerMS\r\n            })\r\n        }\r\n        else if (keys.a.pressed && lastKey === 'a') {\r\n            moveables.forEach((movable) => {\r\n                movable.position.x += playerMS\r\n            })\r\n        }\r\n        else if (keys.s.pressed && lastKey === 's') {\r\n            moveables.forEach((movable) => {\r\n                movable.position.y -= playerMS\r\n            })\r\n        }\r\n        else if (keys.d.pressed && lastKey === 'd') {\r\n            moveables.forEach((movable) => {\r\n                movable.position.x -= playerMS\r\n            })\r\n        }\r\n\r\n\r\n        // playerSprite.weaponArr.forEach((weapon) => {\r\n        //     weapon.attack(farmGridArr)\r\n        // })\r\n\r\n        // plantSeedFromDrawPile()\r\n\r\n        // // draw the BG before drawing others\r\n        // bgSprite.draw()\r\n\r\n        // farmGridArr.forEach((farmGrid) => {\r\n        //     farmGrid.draw()\r\n        //     if(farmGrid.content){\r\n        //         farmGrid.content.draw()\r\n        //     }\r\n        // })\r\n\r\n        // enemies = enemies.filter(enemy => enemy.currentHP > 0)\r\n        // enemies.forEach((enemy) => {\r\n        //     enemy.draw()\r\n        // })\r\n\r\n\r\n        // projectileArr = projectileArr.filter(projectile => projectile.position.x > -1000)\r\n        // projectileArr.forEach((projectile) => {\r\n        //     projectile.draw()\r\n        // })\r\n\r\n        // playerSprite.draw()\r\n    }\r\n}\r\n\r\nfunction initGame() {\r\n\r\n    startAnimating(fps)\r\n\r\n    clearSave()\r\n    if (playerSprite.defaultWeapon) {\r\n        playerSprite.defaultWeapon.forEach((weapon) =>{\r\n            addWeapon(weapon.name)\r\n        })\r\n    }\r\n\r\n    loadSave()    \r\n   \r\n}\r\n\r\nfunction pauseTheGame(){\r\n    isPaused = true\r\n}\r\n\r\nfunction unPauseTheGame(){\r\n    isPaused = false\r\n}\r\n\r\nfunction writeSave() {\r\n    // TODO: write save file with current weapon, relics and levels\r\n    if (!storageAvailable('localStorage')) {\r\n        console.log(\"LocalStorage unavailable!\")\r\n        return\r\n    }\r\n    // TODO: write save\r\n\r\n    // localStorage[\"weaponArr\"] = JSON.stringify(playerSprite.weaponArr);\r\n\r\n    // playerExp = [playerSprite.level, playerSprite.currentExp, playerSprite.requiredExp,]\r\n    // localStorage[\"playerCurrentExp\"] = JSON.stringify(playerExp);\r\n\r\n}\r\n\r\nfunction loadSave() {\r\n    bgmVolume = localStorage.getItem(\"bgmVolume\")\r\n\r\n    if (!localStorage.weaponArr) { return }\r\n\r\n    // while (playerSprite.weaponArr.length > 0) {\r\n    //     playerSprite.weaponArr.pop()\r\n    // }\r\n\r\n\r\n    // storedJson = JSON.parse(localStorage.weaponArr)\r\n\r\n    // storedJson.forEach((weapon) => {\r\n    //     const weaponImg = new Image();\r\n    //     weaponImg.src = currentWeaponSet[weapon.name].imgSrc\r\n    //     weapon = new Weapon({\r\n    //         position: {\r\n    //             x: playerSprite.position.x,\r\n    //             y: playerSprite.position.y\r\n    //         },\r\n    //         image: weaponImg,\r\n    //         frames: {\r\n    //             max: 1,\r\n    //             hold: 1\r\n    //         },\r\n    //         animate: true,\r\n    //         scale: 5,\r\n    //         damage: weapon.damage,\r\n    //         coolDown: weapon.coolDown,\r\n    //         name: weapon.name,\r\n    //         levelUpEffect: weapon.levelUpEffect,\r\n    //         level: weapon.level,\r\n    //         numOfProjectile: weapon.numOfProjectile,\r\n    //     })\r\n    //     playerSprite.weaponArr.push(weapon)\r\n    // })\r\n    // const playerExp = JSON.parse(localStorage.playerCurrentExp)\r\n    // playerSprite.level = playerExp[0]\r\n    // playerSprite.currentExp = playerExp[1]\r\n    // playerSprite.requiredExp = playerExp[2]\r\n}\r\n\r\nfunction clearSave() {\r\n    localStorage.clear()\r\n}\r\n\r\n// start playing BGM once the user clicked\r\nlet clicked = false\r\naddEventListener('click', () => {\r\n    if (!clicked) {\r\n        bgm = audio.letterIris\r\n\r\n        if (bgmVolume == undefined) {\r\n            bgmVolume = 5\r\n        }\r\n        bgm.volume(bgmVolume / 100)\r\n\r\n        // TODO: fix the audio stopping issue when switching between pages\r\n        // bgm.play()\r\n\r\n        clicked = true\r\n    }\r\n})\r\n\r\nlet lastKey = ''\r\nwindow.addEventListener('keydown', (e) => {\r\n    switch (e.key) {\r\n        case 'w':\r\n            keys.w.pressed = true\r\n            lastKey = 'w'\r\n            break\r\n        case 'a':\r\n            keys.a.pressed = true\r\n            lastKey = 'a'\r\n            break\r\n\r\n        case 's':\r\n            keys.s.pressed = true\r\n            lastKey = 's'\r\n            break\r\n\r\n        case 'd':\r\n            keys.d.pressed = true\r\n            lastKey = 'd'\r\n            break\r\n    }\r\n})\r\n\r\nwindow.addEventListener('keyup', (e) => {\r\n    switch (e.key) {\r\n        case 'w':\r\n            keys.w.pressed = false\r\n            break\r\n        case 'a':\r\n            keys.a.pressed = false\r\n            break\r\n        case 's':\r\n            keys.s.pressed = false\r\n            break\r\n        case 'd':\r\n            keys.d.pressed = false\r\n            break\r\n    }\r\n})\r\n\r\n\r\ninitGame()\r\n\r\n\r\n// Example use:\r\n// var scores = {\r\n//     John: 2, Sarah: 3, Janet: 1\r\n// };\r\n// var filtered = Object.filter(scores, score => score > 1);\r\n// return {} if no match found\r\nObject.filter = (obj, predicate) => \r\n    Object.keys(obj)\r\n          .filter( key => predicate(obj[key]) )\r\n          .reduce( (res, key) => (res[key] = obj[key], res), {} );\r\n\r\n\r\n// const currentPx = new Patient(patientData.P123456)\r\n\r\n// const contentManager = new ContentManager({\r\n//     container : document.querySelector(\".content-container\"),\r\n//     pxHxList: currentPx.HxList[0],\r\n// })\r\n// contentManager.init()\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["fpsInterval","now","then","elapsed","bgmVolume","keys","w","pressed","a","s","d","update","window","requestAnimationFrame","Date","lastKey","moveables","forEach","movable","position","y","x","document","querySelector","textContent","clicked","addEventListener","bgm","audio","letterIris","undefined","volume","e","key","localStorage","clear","playerSprite","defaultWeapon","weapon","addWeapon","name","getItem","weaponArr","Object","filter","obj","predicate","reduce","res"],"sourceRoot":""}